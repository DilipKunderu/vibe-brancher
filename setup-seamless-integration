#!/bin/bash
# Setup seamless Git Vibe Brancher integration

set -e

echo "üåø Setting up seamless Git Vibe Brancher integration..."

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Error: Not in a git repository"
    exit 1
fi

# Create git aliases that use the automatic wrapper
echo "üîß Setting up automatic git aliases..."

# Core automatic aliases
git config alias.commit "!$SCRIPT_DIR/git-vibe-auto commit"
git config alias.add "!$SCRIPT_DIR/git-vibe-auto add"
git config alias.status "!$SCRIPT_DIR/git-vibe-auto status"
git config alias.checkout "!$SCRIPT_DIR/git-vibe-auto checkout"
git config alias.merge "!$SCRIPT_DIR/git-vibe-auto merge"
git config alias.rebase "!$SCRIPT_DIR/git-vibe-auto rebase"

# Vibe-specific commands
git config alias.vibe "!$SCRIPT_DIR/git-vibe-auto vibe"
git config alias.vibe-daemon "!$SCRIPT_DIR/git-vibe-auto vibe start-daemon"
git config alias.vibe-stop "!$SCRIPT_DIR/git-vibe-auto vibe stop-daemon"
git config alias.vibe-auto-commit "!$SCRIPT_DIR/git-vibe-auto vibe auto-commit"

echo "‚úÖ Created automatic git aliases:"
echo "   git commit          - Auto-commit with vibe analysis"
echo "   git add             - Add files with vibe analysis"
echo "   git status          - Status with vibe analysis"
echo "   git checkout        - Checkout with vibe analysis"
echo "   git merge           - Merge with vibe analysis"
echo "   git rebase          - Rebase with vibe analysis"
echo "   git vibe-daemon     - Start background daemon"
echo "   git vibe-stop       - Stop background daemon"
echo "   git vibe-auto-commit - Manual auto-commit"

# Create enhanced pre-commit hook
echo "üîß Setting up enhanced pre-commit hook..."

cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash
# Enhanced pre-commit hook with automatic vibe analysis

# Get the directory where vibe_brancher is installed
VIBE_DIR="$(git config --global --get vibe-brancher.path 2>/dev/null)"
if [ -z "$VIBE_DIR" ]; then
    # Try to find it in common locations
    for dir in "$HOME/git-vibe-brancher" "$HOME/.local/bin" "/usr/local/bin"; do
        if [ -f "$dir/vibe_brancher.py" ]; then
            VIBE_DIR="$dir"
            break
        fi
    done
fi

if [ -n "$VIBE_DIR" ] && [ -f "$VIBE_DIR/vibe_brancher.py" ]; then
    # Run automatic branch analysis
    python3 "$VIBE_DIR/vibe_brancher.py" --auto-branch --silent
    
    # Run analysis and show results
    echo "üîç Running vibe analysis..."
    python3 "$VIBE_DIR/vibe_brancher.py" --verbose
    
    # Ask if user wants to continue with commit
    echo ""
    read -p "ü§î Continue with commit? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Commit cancelled."
        exit 1
    fi
fi
EOF

chmod +x .git/hooks/pre-commit

# Create post-commit hook for automatic operations
cat > .git/hooks/post-commit << 'EOF'
#!/bin/bash
# Post-commit hook for vibe analysis

# Get the directory where vibe_brancher is installed
VIBE_DIR="$(git config --global --get vibe-brancher.path 2>/dev/null)"
if [ -z "$VIBE_DIR" ]; then
    # Try to find it in common locations
    for dir in "$HOME/git-vibe-brancher" "$HOME/.local/bin" "/usr/local/bin"; do
        if [ -f "$dir/vibe_brancher.py" ]; then
            VIBE_DIR="$dir"
            break
        fi
    done
fi

if [ -n "$VIBE_DIR" ] && [ -f "$VIBE_DIR/vibe_brancher.py" ]; then
    # Run silent analysis after commit
    python3 "$VIBE_DIR/vibe_brancher.py" --auto-branch --silent
fi
EOF

chmod +x .git/hooks/post-commit

echo "‚úÖ Created enhanced git hooks:"
echo "   pre-commit  - Automatic branch analysis before commits"
echo "   post-commit - Silent analysis after commits"

# Create a vibe daemon startup script
cat > .git/hooks/post-checkout << 'EOF'
#!/bin/bash
# Post-checkout hook for vibe analysis

# Only run on branch changes (not file checkouts)
if [ "$3" = "1" ]; then
    echo "üåø Switched to branch: $(git branch --show-current)"
    
    # Get the directory where vibe_brancher is installed
    VIBE_DIR="$(git config --global --get vibe-brancher.path 2>/dev/null)"
    if [ -z "$VIBE_DIR" ]; then
        # Try to find it in common locations
        for dir in "$HOME/git-vibe-brancher" "$HOME/.local/bin" "/usr/local/bin"; do
            if [ -f "$dir/vibe_brancher.py" ]; then
                VIBE_DIR="$dir"
                break
            fi
        done
    fi
    
    if [ -n "$VIBE_DIR" ] && [ -f "$VIBE_DIR/vibe_brancher.py" ]; then
        echo "üîç Running vibe analysis on new branch..."
        python3 "$VIBE_DIR/vibe_brancher.py"
    fi
fi
EOF

chmod +x .git/hooks/post-checkout

echo "‚úÖ Created post-checkout hook for branch analysis"

echo ""
echo "üéâ Seamless integration complete!"
echo ""
echo "üöÄ Your git commands now automatically include vibe analysis:"
echo "   git commit          - Auto-analyzes and suggests branching"
echo "   git add             - Analyzes changes after adding"
echo "   git status          - Shows vibe analysis + git status"
echo "   git checkout        - Analyzes when switching branches"
echo ""
echo "ü§ñ Background daemon commands:"
echo "   git vibe-daemon     - Start automatic monitoring"
echo "   git vibe-stop       - Stop automatic monitoring"
echo ""
echo "üí° The tool now works invisibly in the background!"
echo "   Just use git normally and vibe analysis happens automatically."
